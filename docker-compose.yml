version: '3.8'

services:
  eureka:
    container_name: eureka-service
    build:
      context: ./eureka-service
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - ms-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    environment:
      - eureka.instance.hostname=eureka
      - eureka.client.service-url.defaultZone=http://eureka:8761/eureka/
    depends_on:
      - postgres

  postgres:
    image: postgres:13
    container_name: postgres
    networks:
      - local-postgres
      - ms-network
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=0000
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./pfe/backuppostgres.sql:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      timeout: 20s
      retries: 10

  prayertime:
    container_name: prayertime
    build:
      context: ./prayertime
      dockerfile: Dockerfile
    ports:
      - "8098:8098"
    networks:
      - local-postgres
      - ms-network
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgres
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=0000
      - eureka.client.service-url.defaultZone=http://eureka:8761/eureka
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8098/actuator/health || exit 1"]
      interval: 60s
      retries: 5
      start_period: 15s
      timeout: 10s
    depends_on:
      postgres:
        condition: service_healthy
      eureka:
        condition: service_healthy

networks:
  local-postgres:
  ms-network:

volumes:
  postgres-data:
